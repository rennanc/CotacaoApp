@model CotacaoApp.Models.Proposta
@using CotacaoApp.Enumerations
@{
    ViewBag.Title = "Passo 4 - Condutores";
}

<button type="button" class="btn btn-default btn-lg">Seu Carro</button>
<button type="button" class="btn btn-default btn-lg">Localização</button>
<button type="button" class="btn btn-default btn-lg">Segurado</button>
<button type="button" class="btn btn-primary btn-lg">Condutores</button>
<button type="button" class="btn btn-default btn-lg">Conclusão</button>

<h2>Condutores</h2>

@using (Html.BeginForm("Passo4", "Proposta", FormMethod.Post, new { id = "Proposta" }))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h4>Formulario</h4>
        <hr />

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.Hidden("proposta", new Microsoft.Web.Mvc.MvcSerializer().Serialize(Model))

        <div class="form-group">
            <div class="col-md-5 text-right">
                <p>@Html.Label("Quem é o condutor principal do carro?*", htmlAttributes: new { @class = "control-label" })</p>
                <i>
                    O condutor principal é a pessoa que dirige o carro no mínimo 6
                    dias por semana. Se houver alguém entre 18 e 24 anos que
                    dirija o mesmo veículo mais de um dia por semana, esta
                    pessoa deve ser considerada o condutor principal. Se não for
                    possível identificar o condutor principal por não ter ninguém
                    que dirija no mínimo 6 dias por semana, considerar sempre o
                    motorista mais jovem.
                </i>
            </div>
            <div class="col-md-7">
                <p>@Html.RadioButtonFor(model => model.Segurado.IECondutorPrincipal, IECondutorPrincipal.CONDUTORPRINCIPAL) Condutor Principal</p>
                <p>@Html.RadioButtonFor(model => model.Segurado.IECondutorPrincipal, IECondutorPrincipal.OUTRAPESSOA) Outra Pessoa</p>
                @Html.ValidationMessageFor(model => model.Segurado.IECondutorPrincipal, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="border-box display-hide" id="OutroCondutor">
            <div class="form-group">
                @Html.Label("Nome completo do(a) condutor(a) principal*", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.OutroCondutor.Nome, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.OutroCondutor.IESexo, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.RadioButtonFor(model => model.OutroCondutor.IESexo, IESexo.MASCULINO) Masculino
                    @Html.RadioButtonFor(model => model.OutroCondutor.IESexo, IESexo.FEMININO) Feminino
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.OutroCondutor.IEEstadoCivil, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    <p>@Html.RadioButtonFor(model => model.OutroCondutor.IEEstadoCivil, IEEstadoCivil.CASADOAOURESIDEHAPELOMENOS2ANOSCOMCOMPANHEIROA) Casado(a) ou reside há pelo menos 2 anos com companheiro(a)</p>
                    <p>@Html.RadioButtonFor(model => model.OutroCondutor.IEEstadoCivil, IEEstadoCivil.SEPARADOADIVORCIADOA) Separado(a)/Divorciado(a)</p>
                    <p>@Html.RadioButtonFor(model => model.OutroCondutor.IEEstadoCivil, IEEstadoCivil.SOLTEIROA) Solteiro(a)</p>
                    <p>@Html.RadioButtonFor(model => model.OutroCondutor.IEEstadoCivil, IEEstadoCivil.VIUVOA) Viúvo(a)</p>
                    <p>@Html.ValidationMessageFor(model => model.OutroCondutor.IEEstadoCivil, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-4 text-right">
                    <p><label class="control-label">CPF do proprietário*</label></p>
                    <i>É muito importante colocar o CPF correto para obter uma cotação exata e com preços dentro do seu perfil. Não se preocupe, as informações serão armazenadas com total segurança.</i>
                </div>
                <div class="col-md-8">
                    @Html.EditorFor(model => model.OutroCondutor.CodigoCpf, new { htmlAttributes = new { @class = "form-control cpf" } })
                    @Html.ValidationMessageFor(model => model.OutroCondutor.CodigoCpf, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.OutroCondutor.IERelacaoProprietario, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    <p>@Html.RadioButtonFor(model => model.OutroCondutor.IERelacaoProprietario, IERelacaoProprietario.CONJUGE) Cônjuge</p>
                    @*<p>@Html.RadioButtonFor(model => model.OutroCondutor.IERelacaoProprietario, "1") Em transferência para o segurado</p>*@
                    <p>@Html.RadioButtonFor(model => model.OutroCondutor.IERelacaoProprietario, IERelacaoProprietario.FILHOAOUENTEADOA) Filho(a) ou Enteado(a)</p>
                    <p>@Html.RadioButtonFor(model => model.OutroCondutor.IERelacaoProprietario, IERelacaoProprietario.FILHOAOUENTEADOA) Operação de leasing</p>
                    <p>@Html.RadioButtonFor(model => model.OutroCondutor.IERelacaoProprietario, IERelacaoProprietario.PAIOUMAE) Pai ou Mãe</p>
                    <p>@Html.RadioButtonFor(model => model.OutroCondutor.IERelacaoProprietario, IERelacaoProprietario.DIRETORGERENTESOCIO) Diretor/Gerente/Sócio</p>
                    <p>@Html.RadioButtonFor(model => model.OutroCondutor.IERelacaoProprietario, IERelacaoProprietario.FUNCIONARIO) Funcionário</p>
                    <p>@Html.RadioButtonFor(model => model.OutroCondutor.IERelacaoProprietario, IERelacaoProprietario.MOTORISTAPARTICULALEVACARO) Motorista particular e leva o veiculo para casa</p>
                    <p>@Html.RadioButtonFor(model => model.OutroCondutor.IERelacaoProprietario, IERelacaoProprietario.MOTORISTAPARTICULALEVACARO) Motorista particular e não leva o veículo para casa</p>
                    <p>@Html.RadioButtonFor(model => model.OutroCondutor.IERelacaoProprietario, IERelacaoProprietario.OUTROS) Outros</p>
                    @Html.ValidationMessageFor(model => model.OutroCondutor.IERelacaoProprietario, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("CEP da residência de PRINCIPAL*", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.OutroCondutor.NumeroCep, new { htmlAttributes = new { @class = "form-control cep" } })
                    @Html.ValidationMessageFor(model => model.OutroCondutor.NumeroCep, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

            <div class="form-group">
                @Html.Label("Tipo de residência do Principal*", htmlAttributes: new { @class = "control-label col-md-5" })
                <div class="col-md-7">
                    <p>@Html.RadioButtonFor(model => model.Segurado.IETipoResidencia, IETipoResidencia.APARTAMENTOOUFLAT) Apartamento ou flat</p>
                    <p>@Html.RadioButtonFor(model => model.Segurado.IETipoResidencia, IETipoResidencia.CASAEMCONDOMINIOFECHADO) Casa em condominio fechado</p>
                    <p>@Html.RadioButtonFor(model => model.Segurado.IETipoResidencia, IETipoResidencia.CASAOUSOBRADO) Casa ou sobrado</p>
                    <p>@Html.RadioButtonFor(model => model.Segurado.IETipoResidencia, IETipoResidencia.CHACARAFAZENDAOUSITIO) Chácara, fazenda ou sítio</p>
                    <p>@Html.RadioButtonFor(model => model.Segurado.IETipoResidencia, IETipoResidencia.OUTROS) Outros</p>
                    <p>@Html.RadioButtonFor(model => model.Segurado.IETipoResidencia, IETipoResidencia.NAOSEI) Não sei</p>
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Qual a profissão do Principal?*", htmlAttributes: new { @class = "control-label col-md-5" })
                <div class="col-md-7">
                    @Html.EditorFor(model => model.Segurado.Profissao, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Nos últimos 24 meses Principal foi vítima de roubo / furto de carro?*", htmlAttributes: new { @class = "control-label col-md-5" })
                <div class="col-md-7">
                    @Html.RadioButtonFor(model => model.Segurado.IERoubadoEm24Meses, IERoubadoEm24Meses.SIM) Sim
                    @Html.RadioButtonFor(model => model.Segurado.IERoubadoEm24Meses, IERoubadoEm24Meses.NAO) Não
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Algum condutor estuda?*", htmlAttributes: new { @class = "control-label col-md-5" })
                <div class="col-md-7">
                    @Html.RadioButtonFor(model => model.Segurado.IEAlgumCondutorEstuda, IEAlgumCondutorEstuda.SIM) Sim
                    @Html.RadioButtonFor(model => model.Segurado.IEAlgumCondutorEstuda, IEAlgumCondutorEstuda.NAO) Não
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-4 col-md-1">
                    <input type="submit" name="btnVoltar" value="<< Anterior" class="btn btn-default" />
                </div>
                <div class="col-md-1">
                    <input type="submit" name="btnAvancar" value="Confirmar e Prosseguir >>" class="btn btn-primary" />
                </div>
            </div>
        
    </div>
}

<script type="text/javascript">
    $(".cpf").inputmask("999.999.999-99");
    $(".cep").inputmask("99.999-999");


    $("input[name='Segurado.IECondutorPrincipal']").on('click', function () {
        if ($(this).val() == "False" ) {
            $('#OutroCondutor').show();
        } else {
            $('#OutroCondutor').hide();
        }
    });

    //VALIDACAO COMPORTAMENTO PADRAO
    $.validator.setDefaults({
        highlight: function (element) {
            $(element).closest('.form-group').addClass('has-error');
        },
        unhighlight: function (element) {
            $(element).closest('.form-group').removeClass('has-error');
        },
        errorElement: 'span',
        errorClass: 'help-block',
        errorPlacement: function (error, element) {
            if (element.parent('.input-group').length) {
                error.insertAfter(element.parent());
            } else {
                error.insertAfter(element);
            }
        }
    });
    //CAMPOS QUE SERÃO VALIDADOS
    ///para o Bruno fazer
    $("#Proposta").validate({
        rules: {
            "Segurado.IECondutorPrincipal": {
                required: true
            },
            "OutroCondutor.Nome": {
                required: true
            },
            "OutroCondutor.IESexo": {
                required: true
            },
            "OutroCondutor.IEEstadoCivil": {
                required: true
            },
            "OutroCondutor.CodigoCpf": {
                required: true
            },
            "OutroCondutor.IERelacaoProprietario": {
                required: true
            },
            "OutroCondutor.NumeroCep": {
                required: true,
                cepcorreio: true
            },
            "Segurado.IETipoResidencia": {
                required: true
            },
            "Segurado.Profissao": {
                required: true
            },
            "Segurado.IERoubadoEm24Meses": {
                required: true
            },
            "Segurado.IEAlgumCondutorEstuda": {
                required: true
            }
        }
    });
</script>

<script type="text/javascript" src="~/Scripts/utilCorretorApp.js"></script>
